
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b7  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 80 00 	call	0x100	; 0x100 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SevSeg_init>:

		
}

void SevSeg_init(void){
	DIO_PORTA->DDR=0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DIO_PORTC->DDR,6);
  86:	84 b3       	in	r24, 0x14	; 20
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DIO_PORTC->DDR,7);
  8c:	84 b3       	in	r24, 0x14	; 20
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	84 bb       	out	0x14, r24	; 20
  92:	08 95       	ret

00000094 <SevSeg_display>:
	
}

void SevSeg_display(uint8 num)
{
	SET_BIT(DIO_PORTC->PORT,6);
  94:	95 b3       	in	r25, 0x15	; 21
  96:	90 64       	ori	r25, 0x40	; 64
  98:	95 bb       	out	0x15, r25	; 21
	CLR_BIT(DIO_PORTC->PORT,7);
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	9f 77       	andi	r25, 0x7F	; 127
  9e:	95 bb       	out	0x15, r25	; 21
	DIO_PORTA->PORT=sev_seg[num%10];
  a0:	ed ec       	ldi	r30, 0xCD	; 205
  a2:	8e 9f       	mul	r24, r30
  a4:	e1 2d       	mov	r30, r1
  a6:	11 24       	eor	r1, r1
  a8:	e6 95       	lsr	r30
  aa:	e6 95       	lsr	r30
  ac:	e6 95       	lsr	r30
  ae:	2e 2f       	mov	r18, r30
  b0:	22 0f       	add	r18, r18
  b2:	92 2f       	mov	r25, r18
  b4:	99 0f       	add	r25, r25
  b6:	99 0f       	add	r25, r25
  b8:	92 0f       	add	r25, r18
  ba:	89 1b       	sub	r24, r25
  bc:	a8 2f       	mov	r26, r24
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	aa 0f       	add	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	a0 5a       	subi	r26, 0xA0	; 160
  c6:	bf 4f       	sbci	r27, 0xFF	; 255
  c8:	8c 91       	ld	r24, X
  ca:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <SevSeg_display+0x3c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <SevSeg_display+0x42>
  d6:	00 00       	nop
	_delay_ms(1);
		CLR_BIT(DIO_PORTC->PORT,6);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	85 bb       	out	0x15, r24	; 21
		SET_BIT(DIO_PORTC->PORT,7);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	85 bb       	out	0x15, r24	; 21
		DIO_PORTA->PORT=sev_seg[num/10];
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	80 81       	ld	r24, Z
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <SevSeg_display+0x62>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <SevSeg_display+0x68>
  fc:	00 00       	nop
  fe:	08 95       	ret

00000100 <main>:

static const sev_seg[10]={0x7E,0x0C,0xB6,0x9E,0xCC,0xDA,0xFA,0x0E,0xFE,0xCE};
int main(void)
{
    
SevSeg_init();
 100:	0e 94 41 00 	call	0x82	; 0x82 <SevSeg_init>

    while (1) 
    {	
		SevSeg_display(58);
 104:	8a e3       	ldi	r24, 0x3A	; 58
 106:	0e 94 4a 00 	call	0x94	; 0x94 <SevSeg_display>
 10a:	fc cf       	rjmp	.-8      	; 0x104 <main+0x4>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
