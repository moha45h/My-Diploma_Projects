
StopWatch_7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a45  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000520  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000241  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sevseg_init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void sevseg_init(void)
{
	DIO_PORTA->DDR=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DIO_PORTC->DDR,6);
  96:	84 b3       	in	r24, 0x14	; 20
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DIO_PORTC->DDR,7);
  9c:	84 b3       	in	r24, 0x14	; 20
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	84 bb       	out	0x14, r24	; 20
  a2:	08 95       	ret

000000a4 <buttons_init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void buttons_init(void)
{
	CLR_BIT(DIO_PORTD->DDR,2);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DIO_PORTD->DDR,3);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DIO_PORTD->DDR,4);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 7e       	andi	r24, 0xEF	; 239
  b4:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DIO_PORTD->DDR,5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	08 95       	ret

000000be <main>:
int main(void)
{

 
   uint8 temp=0;
    sevseg_init();
  be:	0e 94 49 00 	call	0x92	; 0x92 <sevseg_init>
	buttons_init();
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_init>
	SET_BIT(DIO_PORTC->DDR,5);
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	84 bb       	out	0x14, r24	; 20
	
  while(1) {
		 sec_button=GET_BIT(DIO_PORTD->PIN,2);
  cc:	90 b3       	in	r25, 0x10	; 16
  ce:	92 fb       	bst	r25, 2
  d0:	99 27       	eor	r25, r25
  d2:	90 f9       	bld	r25, 0
  d4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sec_button>
		 min_button=GET_BIT(DIO_PORTD->PIN,3);
  d8:	80 b3       	in	r24, 0x10	; 16
  da:	83 fb       	bst	r24, 3
  dc:	88 27       	eor	r24, r24
  de:	80 f9       	bld	r24, 0
  e0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <min_button>
		start_button=GET_BIT(DIO_PORTD->PIN,4);
  e4:	20 b3       	in	r18, 0x10	; 16
  e6:	22 95       	swap	r18
  e8:	21 70       	andi	r18, 0x01	; 1
  ea:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <start_button>
		//reset_button=GET_BIT(DIO_PORTD->PIN,5);
		 if (min_button==0)
  ee:	81 11       	cpse	r24, r1
  f0:	27 c0       	rjmp	.+78     	; 0x140 <main+0x82>
		 {
			 			 counter++;
  f2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
  f6:	9f 5f       	subi	r25, 0xFF	; 255
  f8:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__data_end>
			 			 while(temp==0)
  fc:	06 c0       	rjmp	.+12     	; 0x10a <main+0x4c>
			 			 {
				 			 temp=min_button=GET_BIT(DIO_PORTD->PIN,3);
  fe:	80 b3       	in	r24, 0x10	; 16
 100:	83 fb       	bst	r24, 3
 102:	88 27       	eor	r24, r24
 104:	80 f9       	bld	r24, 0
 106:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <min_button>
		start_button=GET_BIT(DIO_PORTD->PIN,4);
		//reset_button=GET_BIT(DIO_PORTD->PIN,5);
		 if (min_button==0)
		 {
			 			 counter++;
			 			 while(temp==0)
 10a:	88 23       	and	r24, r24
 10c:	c1 f3       	breq	.-16     	; 0xfe <main+0x40>
			 			 {
				 			 temp=min_button=GET_BIT(DIO_PORTD->PIN,3);
			 			 }
			 			 temp=0;
			 			 
	                     CLR_BIT(DIO_PORTC->PORT,6);
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8f 7b       	andi	r24, 0xBF	; 191
 112:	85 bb       	out	0x15, r24	; 21
	                     SET_BIT(DIO_PORTC->PORT,7);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	80 68       	ori	r24, 0x80	; 128
 118:	85 bb       	out	0x15, r24	; 21
	                     DIO_PORTA->PORT=sev_seg[counter/10];
 11a:	ed ec       	ldi	r30, 0xCD	; 205
 11c:	9e 9f       	mul	r25, r30
 11e:	e1 2d       	mov	r30, r1
 120:	11 24       	eor	r1, r1
 122:	e6 95       	lsr	r30
 124:	e6 95       	lsr	r30
 126:	e6 95       	lsr	r30
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x78>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x7e>
 13c:	00 00       	nop
 13e:	c6 cf       	rjmp	.-116    	; 0xcc <main+0xe>
	                     _delay_ms(1);
	                    				  
	                     }
		else if (sec_button==0)
 140:	91 11       	cpse	r25, r1
 142:	2e c0       	rjmp	.+92     	; 0x1a0 <main+0xe2>
				  {
				  counter++;
 144:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 148:	ef 5f       	subi	r30, 0xFF	; 255
 14a:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <__data_end>
				  while(temp==0)
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	06 c0       	rjmp	.+12     	; 0x15e <main+0xa0>
				  {
					  temp=sec_button=GET_BIT(DIO_PORTD->PIN,2);
 152:	80 b3       	in	r24, 0x10	; 16
 154:	82 fb       	bst	r24, 2
 156:	88 27       	eor	r24, r24
 158:	80 f9       	bld	r24, 0
 15a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <sec_button>
	                    				  
	                     }
		else if (sec_button==0)
				  {
				  counter++;
				  while(temp==0)
 15e:	88 23       	and	r24, r24
 160:	c1 f3       	breq	.-16     	; 0x152 <main+0x94>
				  {
					  temp=sec_button=GET_BIT(DIO_PORTD->PIN,2);
				  }
				  temp=0;
					  
	               SET_BIT(DIO_PORTC->PORT,6);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	80 64       	ori	r24, 0x40	; 64
 166:	85 bb       	out	0x15, r24	; 21
	               CLR_BIT(DIO_PORTC->PORT,7);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	85 bb       	out	0x15, r24	; 21
	               DIO_PORTA->PORT=sev_seg[counter%10];
 16e:	8d ec       	ldi	r24, 0xCD	; 205
 170:	e8 9f       	mul	r30, r24
 172:	81 2d       	mov	r24, r1
 174:	11 24       	eor	r1, r1
 176:	86 95       	lsr	r24
 178:	86 95       	lsr	r24
 17a:	86 95       	lsr	r24
 17c:	88 0f       	add	r24, r24
 17e:	98 2f       	mov	r25, r24
 180:	99 0f       	add	r25, r25
 182:	99 0f       	add	r25, r25
 184:	89 0f       	add	r24, r25
 186:	e8 1b       	sub	r30, r24
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 5a       	subi	r30, 0xA0	; 160
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8b bb       	out	0x1b, r24	; 27
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xd8>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xde>
 19c:	00 00       	nop
 19e:	96 cf       	rjmp	.-212    	; 0xcc <main+0xe>

	               _delay_ms(1);
				  }
			  
			  
             else if(start_button==0)
 1a0:	21 11       	cpse	r18, r1
 1a2:	94 cf       	rjmp	.-216    	; 0xcc <main+0xe>
		 	 {
		     counter--;
 1a4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 1a8:	e1 50       	subi	r30, 0x01	; 1
 1aa:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <__data_end>
			 while(temp==0)
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <main+0xfe>
			 {
				  temp=sec_button=GET_BIT(DIO_PORTD->PIN,4);
 1b2:	80 b3       	in	r24, 0x10	; 16
 1b4:	82 95       	swap	r24
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <sec_button>
			  
			  
             else if(start_button==0)
		 	 {
		     counter--;
			 while(temp==0)
 1bc:	88 23       	and	r24, r24
 1be:	c9 f3       	breq	.-14     	; 0x1b2 <main+0xf4>
			 {
				  temp=sec_button=GET_BIT(DIO_PORTD->PIN,4);
			 }
			 temp=0;
			 
			 SET_BIT(DIO_PORTC->PORT,6);
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	85 bb       	out	0x15, r24	; 21
			 CLR_BIT(DIO_PORTC->PORT,7);
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	85 bb       	out	0x15, r24	; 21
			 DIO_PORTA->PORT=sev_seg[counter%10];
 1cc:	8d ec       	ldi	r24, 0xCD	; 205
 1ce:	e8 9f       	mul	r30, r24
 1d0:	81 2d       	mov	r24, r1
 1d2:	11 24       	eor	r1, r1
 1d4:	86 95       	lsr	r24
 1d6:	86 95       	lsr	r24
 1d8:	86 95       	lsr	r24
 1da:	28 2f       	mov	r18, r24
 1dc:	22 0f       	add	r18, r18
 1de:	92 2f       	mov	r25, r18
 1e0:	99 0f       	add	r25, r25
 1e2:	99 0f       	add	r25, r25
 1e4:	92 0f       	add	r25, r18
 1e6:	e9 1b       	sub	r30, r25
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	90 81       	ld	r25, Z
 1f0:	9b bb       	out	0x1b, r25	; 27
			 CLR_BIT(DIO_PORTC->PORT,6);
 1f2:	95 b3       	in	r25, 0x15	; 21
 1f4:	9f 7b       	andi	r25, 0xBF	; 191
 1f6:	95 bb       	out	0x15, r25	; 21
			 SET_BIT(DIO_PORTC->PORT,7);
 1f8:	95 b3       	in	r25, 0x15	; 21
 1fa:	90 68       	ori	r25, 0x80	; 128
 1fc:	95 bb       	out	0x15, r25	; 21
			 DIO_PORTA->PORT=sev_seg[counter/10];
 1fe:	e8 2f       	mov	r30, r24
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	8b bb       	out	0x1b, r24	; 27
 20a:	8f e9       	ldi	r24, 0x9F	; 159
 20c:	9f e0       	ldi	r25, 0x0F	; 15
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x150>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x156>
 214:	00 00       	nop
			 _delay_ms(1); 
			
			 if(counter==0)
 216:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 21a:	81 11       	cpse	r24, r1
 21c:	57 cf       	rjmp	.-338    	; 0xcc <main+0xe>
			 {
				 SET_BIT(DIO_PORTC->PORT,5);
 21e:	85 b3       	in	r24, 0x15	; 21
 220:	80 62       	ori	r24, 0x20	; 32
 222:	85 bb       	out	0x15, r24	; 21
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	29 e6       	ldi	r18, 0x69	; 105
 228:	88 e1       	ldi	r24, 0x18	; 24
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x16c>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x176>
 234:	00 00       	nop
				 _delay_ms(500);
				 CLR_BIT(DIO_PORTC->PORT,5);
 236:	85 b3       	in	r24, 0x15	; 21
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	47 cf       	rjmp	.-370    	; 0xcc <main+0xe>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
